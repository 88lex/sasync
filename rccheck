#!/usr/bin/env bash

#*****************************************************************************************
# Check if rclone remotes exist and read/write/delete status w SAs where authed
#*****************************************************************************************
vars_for_check() {
  COUNT=$(<$JSCOUNT)
  ret=8
  SAs=$MAXJS
  bak=
  dsaf="--drive-service-account-file=$JSDIR/"
  set_flags="$set_flags --max-transfer=$maxt"

  srcdest=($src $dest)
  rem=(${src%:*} ${dest%:*})
  rem_sa=(true true)
  rem_td=(true true)
  CRYPT=(false false)
  SRC=`sed 's/-/_/g' <<<${rem[0]^^}`
  DEST=`sed 's/-/_/g' <<<${rem[1]^^}`

  if "$EXIT_ON_BAD_PAIR";then CON_EX="exit";else CON_EX="return 1";fi
  if ${MAKE_DESTDIR,,};then rclone mkdir $dest; fi
}

check_remotes()
{ vars_for_check
  if ${CHECK_REMOTES,,};then . msg ck_rem
    # In the for loop below 0 = source and 1 = destination
    for i in 0 1; do
      if `rclone config show "${rem[$i]}" &>/dev/null`
        then . msg ok_cfg "${rem[$i]}"
      else . msg rc_bad "${rem[$i]}";$CON_EX;fi

      if [ `rclone config show "${rem[$i]}" | grep team_drive | wc -m` -gt 18 ]
        then . msg ok_td "${rem[$i]}"
      else rem_td[$i]=false;. msg not_td "${rem[$i]}";fi

      # Below, testing if rclone about gives same result as rclone lsd
      #if `rclone lsd "${srcdest[$i]}" "$dsaf$COUNT.json" &>/dev/null` && ${rem_td[$i]}
      if `rclone about "${srcdest[$i]}" "$dsaf$COUNT.json" &>/dev/null` && ${rem_td[$i]}
        then . msg ok_sa "${srcdest[$i]}";dsaff="$dsaf$COUNT.json"
      else rem_sa[$i]=false;unset dsaff;. msg no_sa "${srcdest[$i]}";fi

      #if `rclone lsd "${srcdest[$i]}" $dsaff &>/dev/null`
      if `rclone about "${srcdest[$i]}" $dsaff &>/dev/null`
        then . msg ok_read "${srcdest[$i]}"
      else . msg fail_read "${srcdest[$i]}";$CON_EX;fi

      if `rclone config show "${rem[$i]}" | grep "type = crypt" &>/dev/null`
        then CRYPT[$i]=true;. msg ok_crypt "${rem[$i]}";fi
    done

    if rclone touch "${rem[1]}/sasync.bin" $dsaff &>/dev/null
      then . msg ok_write "${rem[1]}";else . msg fail_write "${rem[1]}";$CON_EX;fi

    if rclone deletefile -q "${rem[1]}/sasync.bin" $dsaff &>/dev/null
      then . msg ok_del "${rem[1]}";else . msg fail_del "${rem[1]}";fi
  fi

  if ${PRE_CLEAN_TDS,,};then clean_remotes;fi

  if ${BAK_FILES,,} && [ ! -z "${dest#*:}" ];then
    bak="--backup-dir="$(sed "s/:/:$BAK_DIR\//g"<<<$dest);else unset bak;fi

  if ${CALC_SIZE,,};then
    sacalc && [ $srcsize == $destsize ] && . msg skip2next && return 1;fi

  if ${FILE_COMPARE,,};then . msg file_cmp
    if rclone check "$src" "$dest" --one-way --fast-list &> >(grep '0 differences')
      then . msg skip2next;return 1;fi;fi

  . msg ck_fin
}
