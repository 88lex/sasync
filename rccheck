#!/usr/bin/env bash
# Setting variables
COUNT=$(<$JSCOUNT)
ret=8;SAs=$MAXJS;bak=
SRC_SAS=true
DEST_SAS=true
CRYPT=false
maxt_flag="--max-transfer=$maxt"
SRC=`sed 's/-/_/g;s/./\U&/g' <<<${src%:*}`
DEST=`sed 's/-/_/g;s/./\U&/g' <<<${dest%:*}`

if ${CHECK_REMOTES,,};then . msg ck_rem
  for rem in src dest;do
    if `rclone config show ${!rem%:*} &>/dev/null`
      then . msg ok_cfg ${!rem%:*};else . msg rc_bad ${!rem%:*};$CON_EX;fi

    if [ `rclone config show ${!rem%:*} | grep team_drive | wc -m` -gt 18 ]
      then TD=true;. msg ok_td "${!rem%:*}";else TD=false;. msg not_td ${!rem%:*};fi

    if `rclone lsd "${!rem}" $dsaf="$JSDIR/$(<$JSCOUNT).json" &>/dev/null` && ${TD}
      then . msg ok_sa "${!rem}";else export "${rem^^}_SAS=false";. msg no_sa "${!rem}";fi

    if `rclone lsd "${!rem}" &>/dev/null`
      then . msg ok_read "${!rem}";else . msg fail_read "${!rem}";$CON_EX;fi

    if `rclone config show ${!rem%:*} | grep "type = crypt" &>/dev/null`
      then CRYPT=true;. msg ok_crypt ${!rem%:*};fi
  done

  if rclone touch "$dest/sasync.bin" &>/dev/null
    then . msg ok_write "$dest";else . msg fail_write "$dest";$CON_EX;fi

  if rclone deletefile --drive-use-trash=false -q "$dest"/sasync.bin &>/dev/null
    then . msg ok_del "$dest";else . msg fail_del "$dest";$CON_EX;fi
fi

if [ ${PRE_CLEAN_TDS,,} = "true" ];then . cleantds;fi

if ${BAK_FILES,,} && [ ! -z "${dest#*:}" ];then
  bak="--backup-dir="$(sed "s/:/:$BAK_DIR\//g"<<<$dest);else unset bak;fi

if [ ${CALC_SIZE,,} = "true" ]
  then . sacalc && [ $srcsize == $destsize ] && . msg skip2next && continue;fi

[ ${FILE_COMPARE,,} = "true" ] && { . msg file_cmp
if rclone check "$src" "$dest" --one-way --fast-list &> >(grep '0 differences')
  then . msg skip2next;continue;fi; }

. msg ck_fin
