#!/usr/bin/env bash
# Written by Visorak and 88lex ; Use latest rclone beta for best result
# Usage: ./sarotate sarotate.set
# sarotate.set file has two columns, remote and port, and allows multiple remotes
# remote1     1111
# remote2     2222

# rclone variables
RCONFIG=$HOME/.config/rclone/rclone.conf   # Default rclone config. Change this if you have a non-standard rclone config location.
RCUSER="user"                                # Match rclone rc mount user and pass. If you use --no-auth then leave as default. 
RCPASSWORD="pass"                            # rclone rc password. If you use --no-auth then leave as default.
IP=127.0.0.1                                 # Default is localhost/127.0.0.1 but you can change this to match your IP for RC.

# General variables
MINJS=1                                      # Minimum json file that you want to use.
MAXJS=16                                     # Maximum json file that you want to use.
NEXTJS=1                                     # Use 1 or 101.  101 will split api usage to separate projects, but needs many SAs.
JSONDIR=/opt/sa                              # Location of the directory with your service account files.
SLEEPTIME=15m                                # Time the script will sleep for until running again.
LOG_FILE=/opt/logs/sarotate.log              # Directory for logs.
NOTIF="none"                                 # Set NOTIF="key" , "all" or "none". Key includes errors.
NOTIF_CMD="apprise"                          # Simple apprise command. Edit to taste.

init ()
{ COUNT=$MINJS
  MOD=$(( $MAXJS - $MINJS + 1 ))
  unset $notif_key;unset $notif
  if [[ $NOTIF = "key" ]];then notif_key=' tee >($NOTIF_CMD)';fi
  if [[ $NOTIF = "all" ]];then notif=' tee >($NOTIF_CMD)' && notif_key=$notif;fi
  if [[ -f $LOG_FILE ]];then tail -n 50 "$LOG_FILE" > tmp;mv tmp "$LOG_FILE";fi; }

rotate ()
{ ( echo -e "SA Rotate is initializing these mounts at `date` starting with $JSONDIR/$COUNT.json with increment of $NEXTJS"
    cat $1 ; sleep 1s ) | eval tee $notif_key
  while : ;do
    while read remote port junk;do
      case $remote in ''|\#*) continue ;;esac
        eval echo -e "Switching remote $remote to use service account $COUNT.json for $SLEEPTIME" | eval tee $notif
        rclone rc --rc-user="$RCUSER" --rc-pass="$RCPASSWORD" --rc-addr $IP:$port backend/command command=set fs=${remote%:*}: -o \
        service_account_file=$JSONDIR/$COUNT.json --config="$RCONFIG" --log-level=ERROR |& eval tee $notif_key | tee -a "$LOG_FILE"
        COUNT=$(( (($COUNT - $MINJS + $NEXTJS) % $MOD) + $MINJS ))
    done < "$1" 
   sleep $SLEEPTIME
  done; }

init
rotate "$1"