#!/usr/bin/env bash
. msg start
par=false
while getopts 'c:p:' o
  do	case "$o" in
    c ) cfile="${OPTARG:-sasync.conf}" ;;
    p ) par=true;n=${OPTARG:-4} ;;
  esac
done
shift $(($OPTIND - 1))

. sasync.conf.default && . "${cfile:-sasync.conf}"
file1=$1;files="$@";files="${files%% -*}"
shift $( echo $files | wc -w )
cmd_flags="$@"

for file in $files;do set_file+=$(<$SETDIR/$file)$'\n';done
set_clean=$(echo "$set_file" | sed '/#/d; /^$/d; s/[\t\r]/ /g; s/\"//g')

if echo "$set_clean" | grep -E '\||,' &>/dev/null;then IFS1=',|';fi
echo -e "$set_clean" | column -s"$IFS1" -t

STD_LOG="$SASDIR"/logs/$(date +%F)_stdout.log
ERR_LOG="$SASDIR"/logs/$(date +%F)_stderr.log
FAIL_LOG="$SASDIR"/logs/$(date +%F)_fail.log
if [ ! -f $SASDIR/json.count ];then echo $MINJS >$SASDIR/json.count;fi

mkdir -p $SASDIR/backup $SASDIR/logs
cp $SASDIR/sasync.conf "$SASDIR/backup/$(date +%F)_sasync.conf"
find $SASDIR/backup/* -type f -mtime +14 -exec rm {} \;
find $SASDIR/logs/* -type f -mtime +7 -exec rm {} \;

. msg init_complete

parallel_sasync ()
{ rm $SETDIR/tmp_$file1_*;let z=1
  while read pair;do ((z++));echo $pair>$SETDIR/tmp_$file1'_'$z;done <<< "$set_clean"
  find $SETDIR/tmp_$file1_* -type f -printf "%f\n"|parallel -j $n --tmux ./sasync {} $cmd_flags
  rm $SETDIR/tmp_$file1_* ; }

if [ ${par,,} == "true" ];then . msg start_par; parallel_sasync;. msg fin_par;exit;fi
