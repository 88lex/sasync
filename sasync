#!/usr/bin/env bash
echo;echo == STARTING SASYNC v1.0 ==;echo
source ./sasync.conf

run_rclone_w_flags () {
  read COUNT < "$JSON_COUNT"
  [[ "$COUNT" -ge "$MAX_JSON" ]] && echo "$MIN_JSON">"$JSON_COUNT" || echo $(( "$COUNT"+1 ))>"$JSON_COUNT"
  echo BEGIN "$sync" of "$src" to "$dest" w "$COUNT"/"$MAX_JSON".json from $( basename "$input_files" )
  echo GLOBAL FLAGS = "$GLOBAL_FLAGS";echo SET FILE FLAGS = $set_flags;echo
  timeout "$TIMEOUT" rclone "$sync" "$src" "$dest" --max-transfer="$maxtrans" $GLOBAL_FLAGS $set_flags \
  --drive-service-account-file="$JSON_FOLDER"/"$COUNT".json
  echo;echo FINISHED "$sync" from "$src" to "$dest" wJSON "$COUNT".json;echo; }

process_sets () {
  for set_file in $@; do echo Set file = $SETS_FOLDER/$set_file
    grep -v "#" $SETS_FOLDER/$set_file > sync_sets; cat sync_sets
    while read -r sync src dest maxtrans set_flags; do
      source sacalc && [[ "$srcdestdiff" == 0 ]] && \
      ( echo "SOURCE size $src $srcsize = DEST size $dest $destsize ==> SKIPPING TO NEXT SYNC PAIR." )\
      || ( for SA in $(seq 1 "$SAs"); do run_rclone_w_flags;done && source clean_tds )
    done < sync_sets; done }

process_sets $@ > >(tee "logs/stdout_$@.log") 2> >(tee "logs/stderr_$@.log" >&2) && echo == SASYNC COMPLETED ==;echo
