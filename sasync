#!/usr/bin/env bash
. ./sasync.conf

rclone_remote_check () {
  rclone lsd $1 > /dev/null 2>&1
  if [ $? != 0 ]; then echo;echo THE REMOTE $1 FAILED. PLEASE CHECK set.* file and rclone.conf;echo; exit; fi; }

get_json_count () {
  read COUNT < $JSON_COUNT_FILE; if [[ "$COUNT" -gt "$MAX_JSON" ]]; then let COUNT=$MIN_JSON; fi
  echo $(($COUNT+1)) > $JSON_COUNT_FILE; }

run_rclone_with_flags () {
  if [ "$srcdestdiff" == 0 ]
  then echo Size of source $sourcesize == destination $destsize.; echo SKIPPING TO NEXT SOURCE-DESTINATION PAIR.;else
    get_json_count
    echo; echo Starting $synccopymove of $source to $destination w $COUNT/$MAX_JSON.json from $input_files; echo
    echo Global flags are $GLOBAL_FLAGS;echo Flags from set files are $set_flags; sleep 2s
    timeout $TIMEOUT \
    rclone $synccopymove $source $destination $GLOBAL_FLAGS $set_flags --drive-service-account-file=$JSON_FOLDER/$COUNT.json
    echo;echo FINISHED $synccopymove from $source to $destination wJSON $COUNT.json;echo; fi; }

process_sets_and_SAs () {
  read; while IFS=" " read -r synccopymove source destination maxtransfer set_flags; do
    case "$synccopymove" in \#*) continue ;; esac
    rclone_remote_check $source; rclone_remote_check $destination
    . ./sacalc
    for SA in $(seq 1 $SAs); do run_rclone_with_flags; done
    if [ $CLEAN_TDS = "yes" ]; then . $SASYNC_FOLDER/clean_tds; exit; fi;
  done; }

main () { for input_files in $SETS_FOLDER/$*; do process_sets_and_SAs < $input_files; done }

main $@