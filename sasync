#!/usr/bin/env bash
source ./sasync.conf

rclone_remote_check () {
  rclone lsd $1 > /dev/null 2>&1
  [ $? = 0 ] || { echo;echo THE REMOTE $1 in $(basename $input_files) FAILED. CHECK set file and rclone.conf;echo; exit; } }

get_json_count () {
  read COUNT < $JSON_COUNT_FILE; [[ "$COUNT" -le "$MAX_JSON" ]] || let COUNT=$MIN_JSON
  echo $(($COUNT+1)) > $JSON_COUNT_FILE; }

run_rclone_with_flags () {
  if [ "$srcdestdiff" == 0 ]
  then echo Size of SOURCE $source $sourcesize == size of DESTINATION $destination $destsize.
    echo SKIPPING TO NEXT SOURCE-DESTINATION PAIR.;echo
  else
    get_json_count
    echo; echo Starting $synccopymove of $source to $destination w $COUNT/$MAX_JSON.json from $(basename $input_files); echo
    echo GLOBAL FLAGS = $GLOBAL_FLAGS;echo;echo SET FILE FLAGS = $set_flags;echo
    timeout $TIMEOUT \
    rclone $synccopymove $source $destination $GLOBAL_FLAGS $set_flags --drive-service-account-file=$JSON_FOLDER/$COUNT.json
    echo;echo FINISHED $synccopymove from $source to $destination wJSON $COUNT.json;echo
  fi; }

process_sets_and_SAs () {
  read; while IFS=" " read -r synccopymove source destination maxtransfer set_flags; do
    case "$synccopymove" in \#*) continue ;; esac
    rclone_remote_check $source; rclone mkdir $destination; rclone_remote_check $destination
    . ./sacalc
    for SA in $(seq 1 $SAs); do run_rclone_with_flags; done
    [ "$srcdestdiff" == 0 ] || . $SASYNC_FOLDER/clean_tds
  done; }

main () { echo STARTING SASYNC;for input_files in $SETS_FOLDER/$*; do process_sets_and_SAs < $input_files; done }

main $@ > >(tee stdout.log) 2> >(tee stderr.log >&2)