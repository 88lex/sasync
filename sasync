#!/usr/bin/env bash
[ "$1" = "-c" ] && { CFILE=$2;shift 2; }
set_file=$1;shift;cmd_flags=$@
. msg start;. "${CFILE:-sasync.conf}";. sainit

export_json () {
  export "RCLONE_CONFIG_"$1"_SERVICE_ACCOUNT_FILE="$JSDIR"/"$COUNT.json; }

next_sa () {
  COUNT=$(<$JSCOUNT);echo $(( $COUNT>=$MAXJS?$MINJS:$COUNT+1 ))>$JSCOUNT
  [ -f "$JSDIR"/"$COUNT".json ] || next_sa
  [ $SRC_SAS = "true" ] && export_json "$SRC1"
  [ $DEST_SAS = "true" ] && export_json "$DEST1" || SAs=1
  flags="$FLAGS $set_flags --max-transfer $maxt $cmd_flags $bak"
}

run_rclone_w_flags () {
  while [[ "$EXCODE" =~ ^(6|7|8)$ ]] && (($SAs));do
    next_sa;. msg run_rc;((SAs--))
    set -x;$TMOUT rclone $sync "${src//\"}" "${dest//\"}" $flags;EXCODE=$?;set +x
  done
}

run_pairs () {
  while IFS=$IFS1 read -r sync src dest maxt set_flags;do
    . rccheck
    run_rclone_w_flags
    . msg fin_sync
    . cleantds
  done <<<"$set_clean" > >(tee "$STD_LOG") 2> >(tee "$ERR_LOG" >&2)
}

run_pairs && . msg complete
