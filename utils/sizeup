#!/usr/bin/env python3
# Simple python script for grabbing rclone size for remotes and pushing to a google sheet
# Syntax = `./sizeup` or `./sizeup string` to only update remotes with `string` in the name`

import sys, gspread, os, subprocess, json, datetime, re, yaml, confuse, httplib2
#from oauth2client.service_account import ServiceAccountCredentials
from google.oauth2.service_account import Credentials
from httplib2 import Http

#Scopes that the script will need to utilize to auth and edit gsheets.
scopes = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']

#Init config
config = confuse.Configuration('config')
config.set_file('sizeup.yaml')

#Load service account for needed credentials for google sheets. Drive and GSheets API needs to be enabled.
gc = gspread.authorize(Credentials.from_service_account_file(config['credentials']['service_account'].get(str), scopes=scopes))

#gspread vars for loading up the google sheet and editing it.
gsheet = config['sheet']['gsheet'].get()
wsheet = config['sheet']['wsheet'].get()

sh = gc.open(config['sheet']['gsheet'].get())
worksheet = sh.worksheet(config['sheet']['wsheet'].get())
remotes = worksheet.col_values(1)
remotes2 = remotes

try:
    remotes = [rem for rem in remotes if sys.argv[1] in rem]
    if not any(remotes):
        remotes = [rem for rem in remotes2 if rem in sys.argv[1]]
    print(f"Updating size of remotes in {wsheet}, file {gsheet}")
    for i in remotes:
        print(f"\t{i}")
except:
    pass

try:
    if not any(remotes):
        remotes = subprocess.check_output(f"rclone listremotes | egrep -h {sys.argv[1]}", shell=True, universal_newlines=True).splitlines()
        print(f"Adding remotes to {gsheet}")
        for i in remotes:
            print(f"\t{i}")
except:
    print(f"No remotes in gsheet or rclone config that match {sys.argv[1]}")
    exit()

for remote in remotes:
    try:
        print(f"Remote is {remote}")
        rem_size = subprocess.check_output(f"rclone size --json {remote} --fast-list --exclude /backup/**", shell=True)
        parsed_json = json.loads(rem_size)
        print(json.dumps(parsed_json, indent=4, sort_keys=True))

        remcount = int(parsed_json['count'])
        remsize = int(parsed_json['bytes'])
        remsizeGB = int(parsed_json['bytes'] / (1024**3))
        nowtime = str(datetime.date.today())

        print(f"Remote name          = {remote}")
        print(f"Remote file count    = {remcount}")
        print(f"Remote size in GB    = {remsizeGB}")
        print(f"Remote size in bytes = {remsize}")

        try:
            cell = worksheet.find(remote)
            print(f"Found string {remote} in Row {cell.row}, Column {cell.col}")
            range_build = 'A' + str(cell.row) + ':E' + str(cell.row)
            print(range_build)
            cell_list = worksheet.range(range_build)
            cell_values = [remote, remcount, remsizeGB, remsize, nowtime]
            for i, val in enumerate(cell_values):
                cell_list[i].value = val
            print(cell_list[2].value)
            worksheet.update_cells(cell_list)
        except:
            print(f"Remote {remote} not found, add line")
            cell_values = [remote, remcount, remsizeGB, remsize, nowtime]
            worksheet.append_row(cell_values)
    except:
        pass

exit()
