#!/usr/bin/env bash
# Written by Visorak and 88lex
# Usage: ./sarotate set.file <= set.remotes is a text file with remote names, no ':' and ports in two columns

IP=127.0.0.1                   #Default is localhost/127.0.0.1 but you can change this to match your IP for RC.
MINJS=1                        #Minimum json file that you want to use.
MAXJS=800                        #Maximum json file that youw ant to use.
NEXTJS=101                       # Use 1 or 101.  101 will split api usage to separate projects, but needs many SAs
JSONDIR=/opt/sa                # Location of the directory with your service account files.
SLEEPTIME=3s                   # Time the script will sleep for until running again.
COUNT=$MINJS                   # Count needs to be initilized.
STD_LOG_DIR=/opt/logs          # Directory for standard logs
ERR_LOG_DIR=/opt/logs          # Directory for error logs. If it does ot exist, create before running sarotate

rotate ()
{ while : ;do
    echo "SA Rotate is initializing."  
    MOD=$(( $MAXJS - $MINJS + 1 ))
    while read remote port junk;do 
      set -x
      rclone rc --rc-no-auth --rc-addr $IP:$port backend/command command=set fs=${remote%:*}: -o service_account_file=$JSONDIR/$COUNT.json
      set +x
      COUNT=$(( (($COUNT - $MINJS + $NEXTJS) % $MOD) + $MINJS ))
    done < set.sarotate \
    > >(tee -a "$STD_LOG_DIR"/sarotate_std.log) \
    2> >(tee -a "$ERR_LOG_DIR"/sarotate_err.log >&2)
    echo "SA Rotate is going to sleep for $SLEEPTIME."
    sleep $SLEEPTIME
  done
}

rotate
