#!/usr/bin/env bash
# Written by Visorak and 88lex
# Usage: ./sarotate sarotate.set
# sarotate.set file has two columns, remote and port, and allows multiple remotes
# remote1     1111
# remote2     2222

RCUSER="user"                  # rclone rc user. If you use --no-auth then leave as default.
RCPASSWORD="pass"              # rclone rc password. If you use --no-auth then leave as default.
IP=127.0.0.1                   # Default is localhost/127.0.0.1 but you can change this to match your IP for RC.

MINJS=1                        # Minimum json file that you want to use.
MAXJS=16                       # Maximum json file that youw ant to use.
NEXTJS=1                       # Use 1 or 101.  101 will split api usage to separate projects, but needs many SAs.
JSONDIR=/opt/sa                # Location of the directory with your service account files.
SLEEPTIME=3s                  # Time the script will sleep for until running again.

NOTIF=true                     # Set to true to receive apprise notifications. false to omit notifications.
NOTIF_COMM="apprise"           # Adjust if you want a specific apprise command.
LOG_DIR=/opt/logs              # Directory for logs.
DEL_LOG_RESTART=true           # Clear sarotate log when system restarted.

init ()
{ if ${NOTIF,,};then notif='| tee >($NOTIF_COMM)';else notif="";fi
  if ${DEL_LOG_RESTART,,};then rm $LOG_DIR/*;fi
  eval echo "SA Rotate is initializing."$notif && sleep 1s
  COUNT=$MINJS
  MOD=$(( $MAXJS - $MINJS + 1 ))
}

rotate ()
{ while : ;do
    while IFS= read remote port junk;do 
      rc_cmd="rclone rc --rc-user="$RCUSER" --rc-pass="$RCPASSWORD" --rc-addr $IP:$port backend/command command=set fs=${remote%:*}: -o service_account_file=$JSONDIR/$COUNT.json"
      eval echo -e "$rc_cmd"$notif | tee >(eval)
      COUNT=$(( (($COUNT - $MINJS + $NEXTJS) % $MOD) + $MINJS ))
    done < "$1" > >(tee -a "$LOG_DIR"/sarotate.log) 2>&1
    eval echo "SA Rotate is going to sleep for $SLEEPTIME."$notif
    sleep $SLEEPTIME
  done 
}

init
rotate "$1"
